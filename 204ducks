#!/usr/bin/python3
import sys, math
from math import *
from time import time
from sys import argv
from math import exp

proba = lambda a, t : a * exp(-t) + (4 - 3 * a) * exp(-2 * t) + (2 * a - 4) * exp(-4 * t)

def the_proba(a, t):
    this_calc = (4 - 3 * a)
    timer = 2 * a - 4
    return ((-a * math.exp(-t) - this_calc / 2 * math.exp(-2 * t) - timer / 4 * math.exp(-4 * t)))


def usage():
    print("USAGE")
    print("\t./204ducks a\n")
    print("DESCRIPTION")
    print("\ta\tconstant")
    exit (0)


def probability(a, p):
    res = 0
    mult_of_min_and_max = 10 * 100
    for t in range(mult_of_min_and_max):
        res = res + proba(a, t / 100)
        if res >= p:
            rst = t / 100
            return rst


def perba(a, t):
    return sum(proba(a, i / 100)
    for i in range(t * 100))

def ducks(a):
    max_value = 99.9999
    min = 10
    p = 0
    r = 0
    t = 0

    while p < max_value:
        p += proba(a, t) / min
        r += (proba(a, t) / min) * t
        t += 0.001
    r = r / max_value
    r = r + 1./60
    display_av_time(r)
    d = 0
    while t > 0:
        d += ((t - r) ** 2) * (proba(a, t) / 10)
        t -= 0.001
    d /= 99.9999
    d = d ** 0.5
    display_percent(d, a)
pass

def display_av_time(r):
    print("Average return time: %dm %02ds" % divmod(r * 60, 60))

def display_std_deviation(d):
    print("Standard deviation: %.3f" % d)

def display_percent(d, a):
    display_std_deviation(d)
    print("Time after which 50%% of the ducks are back: %dm %02ds" % divmod(probability(a, 50) * 60, 60))
    print("Time after which 99%% of the ducks are back: %dm %02ds" % divmod(probability(a, 99) * 60, 60))
    print("Percentage of ducks back after 1 minute: {0:.1f}%".format((the_proba(float(sys.argv[1]), 1) - the_proba(float(sys.argv[1]), 0)) * 100))
    print("Percentage of ducks back after 2 minutes: {0:.1f}%".format((the_proba(float(sys.argv[1]), 2) - the_proba(float(sys.argv[1]), 0)) * 100))

def check_error_2():
    try:
        nb = float(sys.argv[1])
    except:
        exit(84)
    if (nb < 0 or nb > 2.5):
        exit(84)

def do_all():
    if (len(sys.argv) == 2):
        nb = float(sys.argv[1])
        ducks(nb)


def check_error():
    if (len(sys.argv) == 2):
        if (sys.argv[1] == "-h"):
            usage()
    check_error_2()


def main():
    if (len(sys.argv) != 2):
        exit(84)
    check_error()
    do_all()

if __name__ == '__main__':
    main()